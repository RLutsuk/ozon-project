package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"time"

	"github.com/RLutsuk/ozon-project/graph/model"
)

// User is the resolver for the user field.
func (r *commentResolver) User(ctx context.Context, obj *model.Comment) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Post is the resolver for the post field.
func (r *commentResolver) Post(ctx context.Context, obj *model.Comment) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	// panic(fmt.Errorf("not implemented: CreatePost - createPost"))
	post, _ := r.PostResolver.CreatePostResolver(ctx, input)
	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CreateCommentInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	return &model.User{ID: "123412", Username: "username", Firstname: "firstname", Lastname: "lastname", Created: time.Now()}, nil
}

// Getpost is the resolver for the getpost field.
func (r *queryResolver) Getpost(ctx context.Context, id string) (*model.Post, error) {
	post, err := r.PostResolver.GetPostResolver(ctx, id)
	if err != nil {
		panic(fmt.Errorf("not implemented: GetPost"))
	}
	return post, nil
}

// Getposts is the resolver for the getposts field.
func (r *queryResolver) Getposts(ctx context.Context) ([]*model.Post, error) {
	posts, err := r.PostResolver.GetAllPostsResolver(ctx)
	if err != nil {
		panic(fmt.Errorf("not implemented: GetPost"))
	}
	return posts, nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
